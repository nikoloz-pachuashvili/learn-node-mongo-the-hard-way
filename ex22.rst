{% import "macros/ork.jinja" as ork with context %}
Exercise 22: MongoDB Topologies
===============================

It's time to talk a little about the deployment Topologies of MongoDB. They are split into three distinct setups.

=========================================== ==========================================
Topology                                    Description
=========================================== ==========================================
Single Server                               A single MongoDB instance handles all reads and writes
Replicaset                                  A cluster of MongoDB servers handle reads and writes and provide fault tolerance with automatic failover.
Sharded System                              A collection of replicasets handles horizontal scaling using sharding
=========================================== ==========================================

In the next couple of exercises we will dig into the Three categories and go into how it works and how the driver supports each of the categories.

The Single Server
-----------------

The single server will most people's first experience with MongoDB. It's pretty straight forwards as all reads and writes from your application will be going to the same single server. Let's take a look at how we can set up a single server and connect to it using the driver. Let's start with booting up the ``mongod`` process.

.. code-block:: console

  mkdir ./data
  mongod --dbpath=./data --port 27017

Boot up your text editor and enter the needed connection code.

.. code-block:: javascript

  var MongoClient = require('mongodb').MongoClient;

  MongoClient.connect("mongodb://localhost:27017/test", function(err, db) {
    if(err) throw err;

    console.log("connected to the database");
    db.close();
  });

That pretty much covers a single server. Not very hard to get started right. But what if we want to ensure that our application still runs if the MongoDB server goes down? That's where Replicasets come in and what is next.

The Replicaset
--------------

The replicaset is the way MongoDB handles fault tolerance. It consists of 3 types of server instances (why 3 you might ask, we will get into that shortly).

=========================================== ==========================================
Server type                                 Description
=========================================== ==========================================
Primary                                     The current master of the replicaset that accepts writes
Secondary                                   The slaves of the replicaset, accepts reads but no writes. Can be elected as primary if the current primary goes down.
Arbiter                                     A special type of server that accepts no reads or writes and only partake in the election of a new primary server if the current one goes down.
=========================================== ==========================================

As you can see the only server that accepts writes is the primary but the secondaries allow for an intriguing possibility of scaling reads. Let's get a replicaset up and running.

.. code-block:: console

  ~ $ mkdir ./data
  ~ $ mkdir ./data/30000
  ~ $ mkdir ./data/30001
  ~ $ mkdir ./data/30002
  ~ $ mkdir ./data/logs
  
  ~ $ mongod --dbpath=./data/30000 --logpath=./data/logs/30000.log 
  --replSet test --port 30000 --fork
  about to fork child process, waiting until server is ready for connections.
  forked process: 69559
  ~ $ mongod --dbpath=./data/30001 --logpath=./data/logs/30001.log 
  --replSet test --port 30001 --fork
  about to fork child process, waiting until server is ready for connections.
  forked process: 69560
  ~ $ mongod --dbpath=./data/30002 --logpath=./data/logs/30002.log 
  --replSet test --port 30002 --fork
  about to fork child process, waiting until server is ready for connections.
  forked process: 69561

The next step is to configure the servers so they will connect to each other and form a working replicaset. A configuration is a simple ``JSON`` document. Let's look at the a simple configuration for a replicaset where we have a single primary, one secondary and one arbiter

.. code-block:: javascript

  {
      "_id": "test"
    , "version": 1
    , "members": [
      {
          "_id": 0
        , "host": "localhost:30000"
      },
      {
          "_id": 1
        , "host": "localhost:30001"
      },
      {
          "_id": 2
        , "host": "localhost:30002"
        , "arbiterOnly": true
      }
    ]
  }

So let's have a look at what this configuration means. The top level ``_id`` field is the ``name`` of the replicaset. When we started the ``mongod`` processes earlier we passed in an argument ``--replSet test``. This marks the ``mongod`` process as being a part of a replicaset named ``test``. Our configuration's ``_id`` field needs to match this name so we set it to ``test`` aswell. The ``version`` field is the version of this document. The reason this exists is that we can change the configuration of a replicaset at runtime and MongoDB uses the version number to ensure that we cannot revert to an older version (each new configuration needs to have an increasing version number).

The last part is a field called ``members`` that contains an array of documents, one for each of the servers in the replicaset. Let's look at them.

.. code-block:: javascript

    {
        "_id": 0
      , "host": "localhost:30000"
    }

    {
        "_id": 1
      , "host": "localhost:30001"
    }

The two first documents each have a ``_id`` and ``host`` field. The ``_id`` field is a unique identifier inside the replicaset for that specific server. The ``host`` field contains the host and port for the server.

.. code-block:: javascript

    {
          "_id": 2
        , "host": "localhost:30002"
        , "arbiterOnly": true
    }

Notice that the last document has an ``arbiterOnly`` tag? That is because this last server is only going to be running as an arbiter for server elections (we will cover what elections are in a little bit) and will not service any reads or writes.

So as you obviously have figured out there are some potential parameters that can be added to this configuration file. Let's go through all of the available ones as of MongoDB 2.4.

Top Level Fields
~~~~~~~~~~~~~~~~

====================== ================== ========================
Parameter              Value              Description
====================== ================== ========================
_id                    string             The name of the replicaset
members                array              The array of members that are in the replicaset
settings               doc                Settings that apply to all servers in the replicaset
====================== ================== ========================

Let's look at the fields we can define in a member document.

Member Fields
~~~~~~~~~~~~~

====================== ================== ========================
Parameter              Value (Default)    Description
====================== ================== ========================
chainingAllowed        boolean (true)     If true let's secondary to replicate from other secondaries instead of just the primary
getLastErrorDefaults   doc                Default behavior for getLastError command if none are provided from the driver
getLastErrorModes      doc                Let's you set up getLastError shortnames that move the configuration details of a write concern to the server configuration. One example might be a ``MultipleDC`` write concern that means different things in different server environment or might change over time.
====================== ================== ========================

Similarly the settings field can have several different options

Settings Fields
~~~~~~~~~~~~~~~

====================== ================== ========================
Parameter              Value (Default)    Description
====================== ================== ========================
_id                    ordinal            The zero-indexed identifier of every member in the replicaset
host                   host:port          The host/port location of the member (ex: "localhost:30000")
arbiterOnly            boolean (false)    Sets if the server is an arbiter
buildIndexes           boolean (true)     Determines if ``mongod`` builds indexes on this member
hidden                 boolean (false)    If set the server is hidden and not included in the command ``isMaster`` meaning no reads or writes will go to this server
priority               integer (1)        The server with the highest priority becomes more eligible to become primary in a replicaset. If you set the priority to ``0`` the node can never become a primary.
tags                   doc                Allows you to tag a specific server with arbitrary tags that can be used to mark servers f.ex with geographical location. The tags can be used from the driver to f.ex direct reads to closer servers (only read from tags tagged with Germany from German application servers)
slaveDelay             integer (0)        Allows you to tell the server to lag ``X`` seconds behind the primary. Can be used to ensure you have a window of recovery if data is corrupted on the primary.
====================== ================== ========================

Alright let's get connected and configure the replicaset so it will be up and running.

.. code-block:: javascript

  ~ $ mongo --port 30000
  MongoDB shell version: 2.4.3
  connecting to: 127.0.0.1:30000/test
  > c = {"_id": "test", "version": 1
  , "members": [{ "_id": 0, "host": "localhost:30000"}
  ,{"_id": 1, "host": "localhost:30001"}
  ,{"_id": 2, "host": "localhost:30002", "arbiterOnly": true}]}
  {
    "_id" : "test",
    "version" : 1,
    "members" : [
      {
        "_id" : 0,
        "host" : "localhost:30000"
      },
      {
        "_id" : 1,
        "host" : "localhost:30001"
      },
      {
        "_id" : 2,
        "host" : "localhost:30002",
        "arbiterOnly" : true
      }
    ]
  }
  > rs.initiate(c)
  {
    "info" : "Config now saved locally.  Should come online in about a minute.",
    "ok" : 1
  }
  test:STARTUP2> rs.status()
  {
    "set" : "test",
    "date" : ISODate("2013-05-29T12:51:48Z"),
    "myState" : 1,
    "members" : [
      {
        "_id" : 0,
        "name" : "localhost:30000",
        "health" : 1,
        "state" : 1,
        "stateStr" : "PRIMARY",
        "uptime" : 2573,
        "optime" : {
          "t" : 1369831875,
          "i" : 1
        },
        "optimeDate" : ISODate("2013-05-29T12:51:15Z"),
        "self" : true
      },
      {
        "_id" : 1,
        "name" : "localhost:30001",
        "health" : 1,
        "state" : 2,
        "stateStr" : "SECONDARY",
        "uptime" : 33,
        "optime" : {
          "t" : 1369831875,
          "i" : 1
        },
        "optimeDate" : ISODate("2013-05-29T12:51:15Z"),
        "lastHeartbeat" : ISODate("2013-05-29T12:51:47Z"),
        "lastHeartbeatRecv" : ISODate("1970-01-01T00:00:00Z"),
        "pingMs" : 0
      },
      {
        "_id" : 2,
        "name" : "localhost:30002",
        "health" : 1,
        "state" : 7,
        "stateStr" : "ARBITER",
        "uptime" : 31,
        "lastHeartbeat" : ISODate("2013-05-29T12:51:47Z"),
        "lastHeartbeatRecv" : ISODate("1970-01-01T00:00:00Z"),
        "pingMs" : 0
      }
    ],
    "ok" : 1
  }  

I might take a little while before ``rs.status()`` returns with a result similar to the one above. Just be patient it will eventually finish starting up and get to a stable state. You should see one ``primary`` server, one ``secondary`` server and an ``arbiter``.

We are now up and running let's fire up our editor and get connected.

.. code-block:: javascript

  var MongoClient = require('mongodb').MongoClient;

  MongoClient.connect("mongodb://localhost:30000/test", function(err, db) {
    if(err) throw err;

    console.log("connected to the database");
    db.close();
  });

Only a single address in the ``connect`` function you might ask? The reason is because the replicaset is self discovering. You need only point to a single member of the replicaset for it to discover the other members. Obviously more than on address is better as the connection will fail if that single ``seed`` server it not up when the application tries to connect. Let's change it slightly to reflect this.

.. code-block:: javascript

  var MongoClient = require('mongodb').MongoClient;

  MongoClient.connect("mongodb://localhost:30000,localhost:30001/test", function(err, db) {
    if(err) throw err;

    console.log("connected to the database");
    db.close();
  });

That's it when it comes to connecting to the Replicaset from your application. Now let's discover one of the more powerful aspects of the replicasets, namely read preferences.

Read Preferences
----------------

One of the things introduces in 2.2 or higher is the concept of read preferences. The reason was to allow more flexibility to the application developer in where their application reads from. Say you don't need up to the millisecond updated data (say a content management system where you publish articles). Since you have a replicaset it would be useful to read from one of the ``secondaries`` instead of from the ``primary`` so you could scale your reads by leveraging the multiple ``secondaries`` you have in your replicaset. Or maybe you need the application reads only to go against local data center ``secondaries`` that are replicated across from another datacenter. That's where read preferences and tags come in. Let's quickly look at an overview of the possible read preference concepts the driver has.

====================== ===========================================
Read Preference        Description
====================== ===========================================
Primary                The read should only go to the primary
Primary Preferred      The read should go to the primary if available but two a secondary if not available
Secondary              The read should go to a secondary only
Secondary Preferred    The read should go to the primary only if a secondary is not available
Nearest                The read should go to the nearest server (including secondaries and primary) within an acceptable latency period
====================== ===========================================

As you can see the read preferences give you control over how your read's should behave. The second part of the read preferences are the tags.

As we saw above you can add a field called ``tags`` for a ``member`` document in the replicaset configuration. Tags can be used to identify a server as having some specific location or anything else you can think off. Let's look at an example configuration with tags.

.. code-block:: javascript

  {
      "_id": "test"
    , "version": 1
    , "members": [
      {
          "_id": 0
        , "host": "localhost:30000"
        , "tags": {
          "dc": "ny"
        }
      },
      {
          "_id": 1
        , "host": "localhost:30001"
        , "tags": {
          "dc": "ny"
        }
      },
      {
          "_id": 2
        , "host": "localhost:30002"
        , "tags": {
          "dc": "sf"
        }
      }
    ]
  }

In this configuration we have one ``primary`` and two ``secondaries``. Notice how we have added the ``"dc": "ny"`` tag to the two first servers indicating that they are physically located in New York. The last one has the tag ``"dc": "sf"`` indicating it's located in San Francisco. In a bit we will see how we can use the tags to direct our reads to a server with a specific tag.

So how do we use read preference with the driver? It's fairly simple as we will see, but first we need to understand the inheritance of read preferences in the driver. Let's have a look at our connection example from above but this time we will set a read preference.

.. code-block:: javascript

  var MongoClient = require('mongodb').MongoClient;

  MongoClient.connect("mongodb://localhost:30000/test?readPreference=primaryPreferred"
    , function(err, db) {
        if(err) throw err;
        console.log("connected to the database");

        var articles = db.collection('articles');    

        db.close();
    });

The ``db`` instance returned will have it's read preference set to ``primaryPreferred`` and the ``articles`` collection instance will inherit the read preference settings from the ``db``, meaning all read operations using the ``articles`` collection will use ``primaryPreferred``. But what if we need to override the collections ``read preference`` as we intend reads to happen from a ``secondary`` not from a ``primary``. Luckily this is fairly easy. Let's see how.

.. code-block:: javascript

  var MongoClient = require('mongodb').MongoClient
    , ReadPreference = require('mongodb').ReadPreference;

  MongoClient.connect("mongodb://localhost:30000/test?readPreference=primaryPreferred"
    , function(err, db) {
        if(err) throw err;
        console.log("connected to the database");

        var articles = db.collection('articles'
          , {readPreference: ReadPreference.SECONDARY_PREFERRED});    

        db.close();
    });

Any read operations on the ``articles`` collection will now be executed with the ``secondaryPreferred`` read preference instead of the default one for the database ``primaryPreferred``. Even then imagine that there is a particular query we want to ensure is run against the ``primary`` instead of a secondary. Luckily that's possible as well. Let's see how.

.. code-block:: javascript

  var MongoClient = require('mongodb').MongoClient
    , ReadPreference = require('mongodb').ReadPreference;

  MongoClient.connect("mongodb://localhost:30000/test?readPreference=primaryPreferred"
    , function(err, db) {
        if(err) throw err;
        console.log("connected to the database");

        var articles = db.collection('articles'
          , {readPreference: ReadPreference.SECONDARY_PREFERRED});    

        var cursor = articles.find({}, {readPreference: ReadPreference.PRIMARY});

        db.close();
    });

The ``cursor`` returned from the ``find`` method will now have the ``primary`` read preference instead of the ``secondaryPreferred`` specified in it's collection instance. So as you can see you can read preferences down to the individual query issues against the replicaset. Most of the read preferences are fairly simple but the ``nearest`` one require a bit more explanation. The idea of the ``nearest`` read preference is to attempt to steer the queries to the server that's the closest. This might sound like it's always the closest one but in fact it's not always true. The definition is actually the closest inside an acceptable latency window from the server with the lowest current pingtime. There is an optional parameter that can be passed into ``MongoClient.connect`` that lets you change the value, but the default is ``15ms``. So how does it work.

The driver will ping all ``secondaries`` and the ``primary`` at a regular interval. Saw we get the following results.

================ ============
Server           Ping Time
================ ============
localhost:30000  1 ms
localhost:30001  10 ms
localhost:30001  50 ms
================ ============

The driver establishes the lowest ping time to be ``1 ms`` and since the ``acceptable`` latency window is ``15 ms`` only servers with a ping time less than ``16 ms`` will be candidates for reads. 

================ ============
Server           Ping Time
================ ============
localhost:30000  1 ms
localhost:30001  10 ms
================ ============

In our case that will be servers ``localhost:30000`` and ``localhost:30001``. So how can you change the acceptable latency window? Let's take a quick look.

.. code-block:: javascript

  var MongoClient = require('mongodb').MongoClient;

  MongoClient.connect("mongodb://localhost:30000/test?readPreference=nearest", {
    replSet: {secondaryAcceptableLatencyMS: 50}
  }, function(err, db) {
    if(err) throw err;

    db.close();
  });

We changed the acceptable latency window to ``50ms`` which in our example above would not include all tree servers as possible candidates for reads.

But what if our application should only read from the San Francisco ``secondary``. Let's see how that is accomplished.

.. code-block:: javascript

  var MongoClient = require('mongodb').MongoClient
    , ReadPreference = require('mongodb').ReadPreference;

  MongoClient.connect("mongodb://localhost:30000/test?"
    + "readPreference=secondaryPreferred"
    + "&readPreferenceTags=dc:sf"
    + "&readPreferenceTags=dc:ny", function(err, db) {
      if(err) throw err;
      console.log("connected to the database");

      var articles = db.collection('articles'
        , {readPreference: ReadPreference.SECONDARY_PREFERRED});    

      var cursor = articles.find({}, {readPreference: ReadPreference.PRIMARY});

      db.close();
    });

Let's have a look at the connection string. Notice ``readPreferenceTags=dc:sf`` and ``readPreferenceTags=dc:ny``. These tells the driver to prefer servers that are tagged with ``"dc":"df"`` before any tagged with ``"dc":"ny"``. The order of the ``readPreferenceTags=dc:ny`` matter as the first one will be the most important one. Just as in the previous example tags can be overridden at a ``collection`` and individual ``query`` level. Let's see how.

.. code-block:: javascript

  var MongoClient = require('mongodb').MongoClient
    , ReadPreference = require('mongodb').ReadPreference;

  MongoClient.connect("mongodb://localhost:30000/test?"
    + "readPreference=secondaryPreferred"
    + "&readPreferenceTags=dc:sf"
    + "&readPreferenceTags=dc:ny", function(err, db) {
      if(err) throw err;
      console.log("connected to the database");

      var articles = db.collection('articles');    

      var cursor = articles.find({}
        , {readPreference: new ReadPreference(ReadPreference.PRIMARY, {"dc": "ny"}});

      db.close();
    });

We create an instance of the ``ReadPreference`` class pass in the desired tags as the second parameter of the constructor. The ``cursor`` from the ``articles.find`` will now attempt to read from the New York tagged server instead of the San Francisco one.

.. NOTE::
  
  Tags can be used to create some fairly sophisticated read topologies in your application such as allowing the application to be aware of the geographical location of your servers. When we look at sharding we will see the tags put to some fairly sophisticated uses.

