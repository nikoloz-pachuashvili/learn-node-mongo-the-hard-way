{% import "macros/ork.jinja" as ork with context %}
Exercise 19: Evolving A Simple Schema
=====================================

Let's put together some of the stuff we have covered including inserts, updates with atomic updates and removes to create a little book lending library application. We are going to focus on only the actual code around the book library itself in this chapter and then in the next chapter provide a very simple rest ``API`` to out library application so we can integrate it into the next ``facebook`` of library lending called ``bookface``.

Let's fact model our library model concepts.

Facts
-----

Book
~~~~

- A Book has the title ``Fall of the Roman Empire``
- The Book ``Fall of the Roman Empire`` has the unique id 1
- The Book ``Fall of the Roman Empire`` has a 1973 Edition
- The Book ``Fall of the Roman Empire`` was published by ``T Books`` in 1973
- The Book ``Fall of the Roman Empire`` is identified by the ISBN number ``978-1853260087``
- The Book ``Fall of the Roman Empire`` was written by the Author ``James W Kirk``
- The Book ``Fall of the Roman Empire`` has the summary ``The road to the fall of the Roman Empire``, a comprehensive history of the greatest western empire's decline"
- The 1973 Edition of ``Fall of the Roman Empire`` was loaned by the User ``Peter Griffin`` on the 19th of June 1976.
- The 1973 Edition of ``Fall of the Roman Empire`` that was loaned by the User ``Peter Griffin`` on the 1th of June 1986 should be returned on the 15th of June 1986.

Edition
~~~~~~~

- The Edition of ``Fall of the Roman Empire`` is Published by ``T Books``
- The Edition of ``Fall of the Roman Empire`` was Published in 1973
- The Library has 4 copies of the 1973 Edition of the ``Fall of the Roman Empire``

Author
~~~~~~

- The Author ``James W Kirk`` wrote the book ``Fall of the Roman Empire``
- The Author ``James W Kirk`` wrote the book "The Rise of the Roman Empire"

Publisher
~~~~~~~~~

- The Publisher ``T Books`` published the 1973 Edition of the Book ``Fall of the Roman Empire``
- The Publisher ``T Books`` has published the 1967 Edition of the Book ``Wizard of Oz``
- The Publisher is names ``T Books``

User
~~~~

- The User ``Peter Griffin`` loaned the Book ``Fall of the Roman Empire`` on the 1st of June 1986.
- The User ``Peter Griffin`` has to return the Book ``Fall of the Roman Empire`` on the 15th of June 1986.
- A User is named ``Peter Griffin``

Awesome we have a lot of facts to model around. Let's try to organize them in documents.

Document Representation
-----------------------

We've identified 4 different entities that we can potentially model as documents. Let's start by roughly sketch them out.

Let's consider the ``User`` entity described above. We know the user has a ``name`` and can ``loan`` books for a defined period of time. Let's model the data and see how we can interact with the model.

User Document
~~~~~~~~~~~~~

.. code-block:: javascript
    
    {
        "_id": 1
      , "name": "Peter Griffin"
      , "loaned_books": [
          {
              "id": 1
            , "title": "Fall of the Roman Empire"
            , "loaned_on": "1st of June 1986"
            , "due_on": "15th of June 1986"
          }          
        ]
    }

We added an embedded array of documents called ``loaned_books`` that contain documents representing each loaned book "Peter Griffin" has checked out of the library. In this case it's the 1973 edition of the "Fall of the Roman Empire" ``Book``. What kind of operations would be performed on this document. For the ``User`` have decided to embed ``loaned`` books as an embedded array for each of retrieval and since the amount of books on loan is not likely to be very big for a given ``User``.

1. Add a new loan to the user document
  
.. code-block:: javascript

    db.collection('users').update(
        {_id: 1}
      , {
          $push: {loaned_books: {
              id: 2
            , title: "Wizard of Oz"
            , loaned_on: start_date
            , due_on: due_date
          }}
        }, function(err, result) {})

2. Remove a book from the user and return it to the library

.. code-block:: javascript

    db.collection('users').update(
        {_id: 1}
      , {
          $pop: {loaned_books: {id:2}}
        }, function(err, result) {})

3. Extend a loan period (change the due date)

.. code-block:: javascript

    db.collection('users').update(
        {_id: 1, "loaned_on.id": 2}
      , {
          $set: {
            "loaned_on.$.due_on": new_due_date
          }
        }, function(err, result) {})

Let's look at a possible Author document.

Author Document
~~~~~~~~~~~~~~~

.. code-block:: javascript

    {
        "_id": 1
      , "name": "James W Kirk"
    }

As you can see we don't include an array of authored ``Book`` id's because we will be including the array of authors in the ``Book`` document so we can easily browse books by author. This is similar to the traditional ``1:N`` relational database relationship.

Similarly a publisher is represented as a separate document. 

Publisher Document
~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

    {
        "_id": 1
      , "name": "T Books"
    }

As you can see we don't include an array of published ``Book`` id's because we will be including the ``publisher_id`` in the ``Book`` document so we can easily browse books by publisher. This is similar to the traditional ``1:N`` relational database relationship.

Let's Have a look at the central concept in our library, namely the ``Book``. Let's take a look at the document.

Book Document
~~~~~~~~~~~~~

.. code-block:: javascript

    {
      // Individual Edition id
        "_id": 1
      , "title": "Fall of the Roman Empire"      
      
      // Shared id for all "Fall of the Roman Empire" books
      , "origin_id": 1      
      
      // Information about the publisher
      , "publisher": {
          "published": 1973      
        , "edition": 4      
        , "publisher_id": 1
        , "publisher": "T Books"      
      }
      
      // Book Authors
      , "authors": [
          {
              "id": 1
            , "name": "James W Kirk"
          }
        ]

      // State of book
      , loaned_out: true
      
      // Books lent out
      , "loaned_out_to": {
            "user_id": 1
          , "loaned_on": "1st of June 1986"
          , "due_on": "15th of June 1986"
        }
    }

As you can see the schema for the ``Book`` is quite a bit more complex than the other concepts in the database. Let's look at the some of the values and what they mean.

========================== ==========================================================
Field                      Description
========================== ==========================================================
origin_id                  This id is shared by all editions of a specific book
publisher                  Embedded document with all the publisher information for easy access
authors                    An array of embedded author documents
loaned_out                 Embedded document containing information about the user who has borrowed the book
========================== ==========================================================

So what kind of operation could we do on this document.

1. Locate a ``Fall of the Roman Empire`` book that is not currently loaned out

.. code-block:: javascript

    db.collection('books').findOne({
        title: /^Fall of the Roman/
      , loaned_out:false
    }, function(err, doc) {});

2. Locate all the books for ``Fall of the Roman Empire currently out for loan.

.. code-block:: javascript

    db.collection('books').findOne({
        title: /^Fall of the Roman/
      , loaned_out:false
    }, function(err, doc) {});

3. Loan one of the ``Fall of the Roman Empire`` books out

.. code-block:: javascript

    db.collection('books').update({
      _id: 1, loaned_out_to: {$exists: false}
    }, {
        $set: {
          loaned_out: true
        , loaned_out_to: {
              user_id: 1
            , loaned_on: new Date()
            , due_on: due_date_variable
          }
        }
    }, function(err, doc) {});

The first thing to notice is that the ``update selector`` contains not only the ``_id`` of the ``Book`` we are loaning out but also a requirement that the field ``loaned_out`` should be false. This way we ensure the update fails if someone else checked out the book before our update got run. If we do correctly find the valid document where ``loaned_out`` is still ``false`` we set the the ``loaned_out`` field to true and update the ``loaned_out_to`` field to the user who is borrowing the book.

4. Return the ``Fall of the Roman Empire`` book to the library

.. code-block:: javascript

    db.collection('books').update({
        _id: 1
      , "loaned_out_to.user_id": 1
    }, {
      $set: {
          loaned_out: false
        , loaned_out_to: null
      }
    }, function(err, doc) {});

This concludes the schema design for our simple library application. In the next chapter we will implement a ``REST`` api that allows you to write your frontend code for the library application.