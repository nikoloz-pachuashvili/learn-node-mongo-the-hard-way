{% import "macros/ork.jinja" as ork with context %}
Exercise 16: Basic Indexes in MongoDB
=====================================

In this exercise we will focus on the basics of creating indexes for MongoDB, using them and understanding how our queries use indexes. To kick off let's insert some documents into a database and create an index on the field salary.

{{ ork.code('code/ex16/ex1.js|pyg') }}

Let's have a look at the new collection method we are using called ``ensureIndex``. The call looks like.

.. code-block:: javascript

    collection.ensureIndex({salary:1}, function(err, index_name) {
    }

The ``ensureIndex`` method will only add the index if there is not an index already present. This lets you specify the index creation as part of your code to ensure that the specified index exists. A typical place to locate this code is at the boot up time of your application so the indexes are built before your application is ready to process incoming requests (if an web app).

The meat of the story is the ``{salary:1}`` index specifier. This tells MongoDB to build a ``BTree index`` over the field ``salary`` in all documents present in the collection. If you remember from the introduction on indexes this will create a tree structure allowing us to efficiently query the data. The next line is the actual query.

.. code-block:: javascript

    collection.find({salary:7000}).toArray(function(err, docs) {
    }

This will look for any documents where the ``salary is equal to 7000`` and the output after running the example is (_id will vary). 

.. code-block:: console

    connected to database
    added salary documents
    documents
    [ { pid: 7,
    name: 'Peter',
    salary: 7000,
    _id: 51811ee1746bbbc015000003 } ]

But how can we know if a query is using an index ?. Actually you can do this both from the driver as well as the ``mongo shell``. To be fair it's probably better to do it from the shell but let's cover what that would look like using the driver. The code below ``requires`` that the first example has been run first to populate the collection and create the index. Notice that we use a option for the ``find`` method called ``explain``. This tells the server to return the ``query plan`` or the way it searched for data instead of the actual data for the query.

{{ ork.code('code/ex16/ex2.js|pyg') }}

After running the example you'll see the following

.. code-block:: console

    connected to database
    documents
    [ { cursor: 'BtreeCursor salary_1',
        isMultiKey: false,
        n: 1,
        nscannedObjects: 1,
        nscanned: 1,
        nscannedObjectsAllPlans: 1,
        nscannedAllPlans: 1,
        scanAndOrder: false,
        indexOnly: false,
        nYields: 0,
        nChunkSkips: 0,
        millis: 0,
        indexBounds: { salary: [Object] },
        allPlans: [ [Object] ],
        oldPlan: { cursor: 'BtreeCursor salary_1', indexBounds: [Object] },
        server: 'localhost:27017' } ]

This can be done more simply from the ``mongo`` shell executing the following commands.

.. code-block:: console

    mongo
    MongoDB shell version: 2.4.3
    connecting to: test
    > db.salaries.find({salary:7000}).explain(true)
    {
      "cursor" : "BtreeCursor salary_1",
      "isMultiKey" : false,
      "n" : 1,
      "nscannedObjects" : 1,
      "nscanned" : 1,
      "nscannedObjectsAllPlans" : 1,
      "nscannedAllPlans" : 1,
      "scanAndOrder" : false,
      "indexOnly" : false,
      "nYields" : 0,
      "nChunkSkips" : 0,
      "millis" : 0,
      "indexBounds" : {
        "salary" : [
          [
            7000,
            7000
          ]
        ]
      },
      "allPlans" : [
          {
            "cursor" : "BtreeCursor salary_1",
            "n" : 1,
            "nscannedObjects" : 1,
            "nscanned" : 1,
            "indexBounds" : {
              "salary" : [
                [
                  7000,
                  7000
                ]
              ]
            }
          }
        ],
        "oldPlan" : {
          "cursor" : "BtreeCursor salary_1",
          "indexBounds" : {
            "salary" : [
              [
                7000,
                7000
              ]
            ]
          }
        },      
      "server" : "localhost:27017"
    }   
    > exit
    bye     

I personally prefer to use the ``mongo`` shell to ``explain`` queries as it does not require me to write additional code.

So let's pick apart what the explain document actually means and how it relates to the usage of the documents.

======================= ==================== ======================
Field                   Value                Description
======================= ==================== ======================
cursor                  BtreeCursor salary_1 Tells us what kind of cursor was used for the query. In this case it was a BtreeCursor which means it used the ``salary`` index.
isMultiKey              false                If true it tells us that one of the fields in the index is an array of values.
n                       1                    The number of documents that matches the query.
nscannedObjects         1                    The number of documents scanned during the query                    
nscanned                1                    The number of documents + index entries scanned during the query.
nscannedObjectsAllPlans 1                    The total number of documents scanned for all query plans;
nscannedAllPlans        1                    The total number of documents + index entries scanned across all query plans.
scanAndOrder            false                Is true if an index cannot be used to order the documents returned.
indexOnly               false                Is true if the query can be answered using only the data stored in the index.
nYields                 0                    The number of times MongoDB let somebody else perform work while executing the query.
nChunkSkips             0                    Advanced field for sharding, reflects the number of chunks skipped during the search because chunks were being migrated.
millis                  0                    The miliseconds it took to execute the query.
indexBounds             salary:[[7000,7000]] Contains what field in the index satisfied the query and what range of the index was used to locate the documents.
allPlans                ...                  Contains a list of all the query plans MongoDB tried when executing the query
oldPlan                 ...                  Contains the last query plan used for this query (MongoDB caches the most efficient query plan and reuses it)
"server"                localhost:27017      Server the query was run against
======================= ==================== ======================

As you can see it's quite a lot of information. The easiest way to understand how to read it is to contrast the information above with a query that does not use an index.

.. code-block:: console

    mongo
    MongoDB shell version: 2.4.3
    connecting to: test
    > db.salaries.find({name: "Steve"}).explain(true)
    {
      "cursor" : "BasicCursor",
      "isMultiKey" : false,
      "n" : 1,
      "nscannedObjects" : 5,
      "nscanned" : 5,
      "nscannedObjectsAllPlans" : 5,
      "nscannedAllPlans" : 5,
      "scanAndOrder" : false,
      "indexOnly" : false,
      "nYields" : 0,
      "nChunkSkips" : 0,
      "millis" : 0,
      "indexBounds" : {

      },
      "allPlans" : [
        {
          "cursor" : "BasicCursor",
          "n" : 1,
          "nscannedObjects" : 5,
          "nscanned" : 5,
          "indexBounds" : {

          }
        }
      ],
      "server" : "localhost:27017"
    }
    quit
    bye

  Let's look at the two side by side.

=========================== ======================== ======================
Field                       Value                    Value
=========================== ======================== ======================
``cursor``                  ``BtreeCursor salary_1`` ``BasicCursor``
isMultiKey                  false                    false
n                           1                        1
``nscannedObjects``         ``1``                    ``5``
``nscanned``                ``1``                    ``5``
``nscannedObjectsAllPlans`` ``1``                    ``5``
``nscannedAllPlans``        ``1``                    ``5``
scanAndOrder                false                    false
indexOnly                   false                    false
nYields                     0                        0
nChunkSkips                 0                        0
millis                      0                        0
indexBounds                 salary:[[7000,7000]]     {}                             
allPlans                    ...                      ...
oldPlan                     ...                      ...
"server"                    localhost:27017          localhost:27017
=========================== ======================== ======================

Notice how the ``cursor`` field says ``BasicCursor`` instead off ``BtreeCursor``. This tells us that the query did not use an index and had to go through all of the documents in the collection to satisfy the query. This directly leads to ``nscannedObjects``, ``nscanned``, ``nscannedObjectsAllPlans`` and ``nscannedAllPlans`` being ``5`` as there are ``5`` documents in the collection. Also as MongoDB did not use an index for the query the ``indexBound`` is empty as we could not locate a boundary for the query (remember how the Btree is laid out, a boundary is the set of tree node ranges needed to satisfy the query)

Imagine that there was ``hundreds of thousands`` of documents in the collection instead of just 5. A query looking up a name would require each query to scan through all of the documents to locate matching documents. This would very quickly become unsustainable as the slowness of the query would be compounded by many of them happening in parallel. Even worse since MongoDB would have to load every document into it could cause excessive swapping out of memory to disk (moving documents out of RAM to make space for the ones we need to scan) making the queries even slower and limiting the performance of our application. This is why we need to make sure we always use indexes and even more so if the collection of documents is very large. Cool that covers the basics of understanding how we can create a simple index and how we can investigate if a query is using it correctly or not. Next exercise we will build a ton of different indexes and see how they work and perform.

.. NOTE::

    In development I tend to use an option for ``mongod`` that allows me to catch queries that don't use an index. When you start up the ``mongod`` server add the option ``--notablescan`` to the ``mongod`` command line. If you now attempt to run a query that does not use an index MongoDb will throw an error ``{"$err" : "table scans not allowed:test.salaries", "code" : 10111 }``