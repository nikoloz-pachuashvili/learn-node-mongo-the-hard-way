Exercise 50: Your First Website
===============================

These final three exercises will be very hard and you should take your
time with them. In this first one you'll build a simple web version of
one of your games. Before you attempt this exercise you must have
completed Exercise 46 successfully and have a working **RubyGems**
installed such that you can install packages and know how to make a
skeleton project directory. If you don't remember how to do this, go
back to Exercise 46 and do it all over again.

Installing Sinatra
------------------

Before creating your first web application, you'll first need to install
the "web framework" called **Sinatra**. The term "framework" generally
means "some package that makes it easier for me to do something". In the
world of web applications, people create "web frameworks" to compensate
for the difficult problems they've encountered when making their own
sites. They share these common solutions in the form of a package you
can download to bootstrap your own projects.

In our case, we'll be using the Sinatra framework, but there are many,
many, many others you can choose from. For now, learn Sinatra then
branch out to another one when you're ready (or just keep using Sinatra
since it's good enough).

Using ``gem`` install Sinatra:

.. code-block:: console

    $ gem install sinatra
    Fetching: tilt-1.3.2.gem (100%)
    Fetching: sinatra-1.2.6.gem (100%)
    Successfully installed tilt-1.3.2
    Successfully installed sinatra-1.2.6
    2 gems installed
    Installing ri documentation for tilt-1.3.2...
    Installing ri documentation for sinatra-1.2.6...
    Installing RDoc documentation for tilt-1.3.2...
    Installing RDoc documentation for sinatra-1.2.6...

Make A Simple "Hello World" Project
-----------------------------------

Now you're going to make an initial very simple "Hello World" web
application and project directory using Sinatra. First, make your
project directory:

.. code-block:: console

    $ cd projects
    $ bundle gem gothonweb

You'll be taking the game from Exercise 42 and making it into a web
application, so that's why you're calling it ``gothonweb``. Before you
do that, we need to create the most basic Sinatra application possible.
Put the following code into ``lib/gothonweb.rb``:

.. literalinclude:: ex/ex50/gothonweb/lib/gothonweb_1.rb
    :language: ruby
    :linenos:

Then run the application like this:

.. code-block:: console

    $ ruby lib/gothonweb.rb
    == Sinatra/1.2.6 has taken the stage on 4567 for development with backup from WEBrick
    [2011-07-18 11:27:07] INFO  WEBrick 1.3.1
    [2011-07-18 11:27:07] INFO  ruby 1.9.2 (2011-02-18) [x86_64-linux]
    [2011-07-18 11:27:07] INFO  WEBrick::HTTPServer#start: pid=6599 port=4567

Finally, use your web browser and go to the URL
``http://localhost:4567/`` and you should see two things. First, in your
browser you'll see ``Hello, World!``. Second, you'll see your terminal
with new output like this:

::

    127.0.0.1 - - [18/Jul/2011 11:29:10] "GET / HTTP/1.1" 200 12 0.0015
    localhost - - [18/Jul/2011:11:29:10 EDT] "GET / HTTP/1.1" 200 12
    - -> /
    127.0.0.1 - - [18/Jul/2011 11:29:10] "GET /favicon.ico HTTP/1.1" 404 447 0.0008
    localhost - - [18/Jul/2011:11:29:10 EDT] "GET /favicon.ico HTTP/1.1" 404 447
    - -> /favicon.ico

Those are log messages that Sinatra prints out so you can see that the
server is working, and what the browser is doing behind the scenes. The
log messages help you debug and figure out when you have problems. For
example, it's saying that your browser tried to get ``/favicon.ico`` but
that file didn't exist so it returned ``404 Not Found`` status code.

I haven't explained the way any of this web stuff works yet, because I
want to get you setup and ready to roll so that I can explain it better
in the next two exercises. To accomplish this, I'll have you break your
Sinatra application in various ways and then restructure it so that you
know how it's setup.

What's Going On?
----------------

Here's what's happening when your browser hits your application:

1. Your browser makes a network connection to your own computer, which
   is called ``localhost`` and is a standard way of saying "whatever my
   own computer is called on the network". It also uses ``port 4567``.
2. Once it connects, it makes an HTTP request to the
   ``lib/gothonweb.rb`` application and asks for the ``/`` URL, which is
   commonly the first URL on any website.
3. Inside ``lib/gothonweb.rb`` you've got blocks of code that map to
   URLs. The only one we have is the ``'/'`` mapping. This means that
   whenever someone goes to ``/`` with a browser, Sinatra will find the
   code block to handle the request.
4. Sinatra calls the matching block, which simply returns a string for
   what Sinatra should send to the browser.
5. Finally, Sinatra has handled the request and sends this response to
   the browser which is what you are seeing.

Make sure you really understand this. Draw up a diagram of how this
information flows from your browser, to Sinatra, then to the ``/`` block
and back to your browser.

Fixing Errors
-------------

First, delete line 6 where you assign the ``greeting`` variable, then
hit refresh in your browser. You should see an error page now that gives
you lots of information on how your application just exploded. You know
that the variable ``greeting`` is now missing, but Sinatra gives you
this nice error page to track down exactly where. Do each of the
following with this page:

1. Look at the ``sinatra.error`` variable.
2. Look at the ``REQUEST_`` variables and see if they match anything
   you're already familiar with. This is information that your web
   browser is sending to your gothonweb application. You normally don't
   even know that it's sending this stuff, so now you get to see what it
   does.

Create Basic Templates
----------------------

You can break your Sinatra application, but did you notice that "Hello
World" isn't a very good HTML page? This is a web application, and as
such it needs a proper HTML response. To do that you will create a
simple template that says "Hello World" in a big green font.

The first step is to create a ``lib/views/index.erb`` file that looks
like this:

.. literalinclude:: ex/ex50/gothonweb/lib/views/index.erb
    :language: erb
    :linenos:

What is a ``.erb`` file? ERB stands for Embedded Ruby.
``.erb`` files are HTML with bits of Ruby code embedded within. If you
know what HTML is then this should look fairly familiar. If not,
research HTML and try writing a few web pages by hand so you know how it
works. Since this is an ``erb`` template, Sinatra will fill in "holes"
in the text depending on variables you pass in to the template. Every
place you see ``<%= greeting %>`` will be a variable you'll pass to the
template that alters its contents.

To make your ``lib/gothonweb.rb`` script do this, you need to add some
code to tell Sinatra where to load the template and to render it. Take
that file and change it like this:

.. literalinclude:: ex/ex50/gothonweb/lib/gothonweb.rb
    :language: ruby
    :linenos:

Pay close attention to how I changed the last line of the ``/`` block so
it calls ``erb`` passing in your greeting variable.

Once you have that in place, reload the web page in your browser and you
should see a different message in green. You should also be able to do a
View Source on the page in your browser to see that it is valid HTML.

This may have flown by you very fast, so let me explain how a template
works:

1. In your ``lib/gothonweb.rb`` you've added a new ``erb`` method call.
2. The ``erb`` method knows how to load ``.erb`` files out of the
   ``lib/views/`` directory. It knows which file to grab (``index.erb``
   in this case) because you pass it as a parameter
   (``erb :index ...``).
3. Now, when the browser hits ``/`` and ``lib/gothonweb.rb`` matches and
   executes the ``get '/' do`` block, instead of just returning the
   string ``greeting``, it calls ``erb`` and pass ``greeting`` to it as
   a variable.
4. Finally, you have the HTML in ``lib/views/index.erb`` that contains a
   bit of Ruby code that tests the ``greeting variable``, and if it's
   there, prints one message using the ``greeting``, or a default
   message.

To get deeper into this, change the ``greeting`` variable and the HTML
to see what effect it has. Also create another template named
``lib/views/foo.lib`` and render that using ``erb :foo`` instead of
``erb :index`` like before. This will show you how the first parameter
you pass to ``erb`` is just matched to a ``.erb`` file in
``lib/views/``.

Extra Credit
------------

1. Read the documentation at
   `http://www.sinatrarb.com <http://www.sinatrarb.com>`_.
2. Experiment with everything you can find there, including their
   example code.
3. Read about HTML5 and CSS3 and make some ``.html`` and ``.css`` files
   for practice.
4. If you have a friend who knows **Rails** and is willing to help you,
   then consider doing Ex 50, 51, and 52 in Rails instead to see what
   that's like.

